Source: 
1- https://learnsql.com/blog/common-sql-job-interview-questions/
2- https://www.dataquest.io/blog/sql-interview-questions/ 
3- https://www.interviewquery.com/blog-sql-interview-questions/

SQL Exercise 1 – Write a Statement
Write an SQL statement that lists school names, student names, and their cities only if the school and the student are in the same city and the student is not from New York.

Table: school
school_id       school_name                    city
-----------     ------------------       ----------
1               Stanford                   Stanford
2               University of Cali    San Francisco
3               Harvard University         New York
4               MIT                          Boston
5               Yale                      New Haven

Table: student
student_id   student_name  city           school_id
-----------  ------------  ----------   -----------
1001         Peter Brebec  New York              1
1002         John Goorgy   San Francisco         2
2003         Brad Smith    New York              3
1004         Fabian Johns  Boston                5
1005         Brad Cameron  Stanford              1
1006         Geoff Firby   Boston                5
1007         Johnny Blue   New Haven             2
1008         Johse Brook   Miami                 2

Query:
Select student_name,school_name,city
From school as sc
Left join student as st ON st.school_id=sc.school_id
Where st.city = sc.city and st.city <>'New York';

SQL Exercise 2 – Write a Statement
Write an SQL statement that lists student names, subject names, subject lecturers, and the max amount of points for all subjects except Computer Science and any subjects with a max score between 100 and 200.

Table: subject
subject_id  subject_name          max_score    lecturer
----------  ----------            ----------   -----------
 11         Math                  130          Christena Solem
 12         Computer Science      150          Jaime Pille
 13         Biology               300          Carrol Denmark
 14         Geography             220          Yuette Galang
 15         Physics               110          Colton Rather
 16         Chemistry             400          Nan Mongeau

Table: student
student_id   student_name    city           subject_id
-----------  ------------    ----------    -----------
2001         Thurman Thorn   New York               11
2002         Sharda Clemens  San Francisco          12
2003         Buck Elkins     New York               13
2004         Fabian Johns    Boston                 15
2005         Brad Cameron    Stanford               11
2006         Sofia Roles     Boston                 16
2007         Rory Pietila    New Haven              12

Query:
Select student_name,subject_name,lecturer,max_score
From subject as sb
Left join student as st ON st.subject_id=sb.subject_id
Where subject<>'Computer Science' and max_score between 100 and 200;

SQL Exercise 3 – Find the Error
What is wrong with this SQL query?

Code 1:
SELECT Id, name, YEAR(BillingDate) AS Year
FROM Records
WHERE Year >= 2010

Code 2:
SELECT id, name
FROM students
WHERE grades =
             (SELECT MAX(grades)
              FROM students
              GROUP BY subject_id;);

Answer:
Code 1: Used "Year" at Where clause instead of "YEAR(BillingDate)". And forgated ';'.
Code 2: We don't need Group by at Subquery. If we add this to select, then there will be multiple rows. Since it is equal we can delete this row.

SQL Exercise 4 – Find the Result
Given the following tables …

Table: worker
id    name
---   -----------
1     Guillermo Sparks
2     Gene      Roberts
3     Ally Jones
4     Bryant Summers
5     Candice Green

Table: departments
id    name            manager_id
---   -------------    ---------
1     Financial               3
2     Strategy                5
3     IT                      1
4     Marketing            NULL
… What will be the result of the query below?

Code:
SELECT name
FROM worker
WHERE id NOT IN (SELECT manager_id FROM departments)

Answer:
name
-------------
 Gene Roberts
 Bryant Summers

SQL Exercise 5 – Write a Query
The EMPLOYEE table has the following attributes: NAME, DEPT_ID, and SALARY. Write a query that shows the highest salary in each department.

Select DEPT_ID, Max(SALARY) as max_salary
From EMPLOYEE
Group by 1;

SQL Exercise 6 – Write a Date Query
Write an SQL query that displays the current date.

Answer:
Select current_date;

SQL Exercise 8 – Find and Delete Duplicates
Write an SQL query to find duplicate rows in two tables (EMPLOYEE and WORKERS), and then write a query to delete the duplicates.

Answer:
Select emp.id, count(emp.id) as id_count
from EMPLOYEE as emp
inner join WORKERS as wr ON emp.id=wr.employee_id
group by 1
having id_count >1;

Delete From EMPLOYEE
Where (Select emp.id
from EMPLOYEE as emp
inner join WORKERS as wr ON emp.id=wr.employee_id
group by 1
having id_count >1);

SQL Exercise 9 – Write a Complex Query
Write a query that lists courses’ subject names and the number of students taking the course only if the course has three or more students enrolled.

Table: subject
subject_id  subject_name       max_score        lecturer
----------  ----------         ----------       -----------  
 11         Math                    130         Christena Solem 
 12         Computer Science         50         Jaime Pille 
 13         Biology                 300         Carrol Denmark 
 14         Geography               220         Yuette Galang 
 15         Physics                 110         Colton Rather 
 16         Chemistry               400         Nan Mongeau
Table: student
student_id   student_name       city           subject_id
-----------  ------------       ----------    -----------
2001         Thurman Thorn      New York               11
2002         Sharda Clemens     San Francisco          12
2003         Buck Elkins        New York               13
2004         Fabian Johns       Boston                 15
2005         Brad Cameron       Stanford               11
2006         Sofia Roles        Boston                 16
2007         Rory Pietila       New Haven              12
2008         Cicely Weish       Tulsa                  14
2011         Richard Curtin     Boston                 11
2012         Kassy Ledger       Stanford               11
2013         Henry Ledger       Miami                  13
2014         Darius Fidzberg    San Francisco          12
2015         Darcey Fiorillo    Chicago                14


Answer: 
Select subject_name, count(student_id) as student_id_count
from subject as sb
left join student as st on st.subject_id=sb.subject_id
group by 1
having student_id_count >2; 

Question 2-1
Given the table below, write a SQL query that retrieves the personal data about alumni who scored above 16 on their calculus exam.

Table alumni

student_id	name	surname	birth_date	faculty
347	        Daniela	Lopes	1991-04-26	Medical School
348	        Robert	Fischer	1991-03-09	Mathematics

Table evaluation

student_id	class_id	exam_date	grade
347	        74	        2015-06-19	16
347	        87	        2015-06-06	20
348	        74	        2015-06-19	13

Table curricula

class_id	class_name	professor_id	semester
74	        algebra	    435	            2015_summer
87	        calculus	532	            2015_summer
46	        statistics	625	            2015_winter

Answer: 
Select alumni.*
from alumni as a
left join evaluation as e on a.student_id=e.student_id
left join curricula as c on c.class_id=e.class_id
Where grade > 16 and class_name= "calculus":

Question 2-2
We’ll work with the beverages table. Its first rows are given below.

id	name	    launch_year	fruit_pct	contributed_by
1	Bruzz	    2007	     45	        Sam Malone
2	Delightful	2008	     41	        Sam Malone
3	Nice	    2015	     42	        Sam Malone
Write a query to extract only beverages where fruit_pct is between 35 and 40 (including both ends).

Answer:
Select id,name
from beverages
where fruit_pct>= 35 and fruit_pct<=40;

Question 2-3
We’ll work with the beverages table again. Its first rows are given below.

id	name	launch_year	fruit_pct	contributed_by
1	Bruzz	2007	45	Sam Malone
2	Delightful	2008	41	Sam Malone
3	Nice	2015	42	Sam Malone
Write a query to extract only beverages whose contributor only has one name

Answer: 
select name
from beverages
where contributed_by not like '% %';

Question 2-4
We’ll work with the beverages table again. Its first rows are given below.

id	name	     launch_year	fruit_pct	contributed_by
1	Bruzz	     2007	          45	    Sam Malone
2	Delightful	 2008	          41	    Sam Malone
3	Nice	     2015	          42	    Sam Malone
Write a query that finds the average fruit_pct by contributor and displays it ascending order.

Answer:
Select contributed_by, avg(fruit_pct) avg_fruit_pct
from beverages
group by 1
order by 2:

Question 2-5
Take a look at the query given below:

SELECT column, AGG_FUNC(column_or_expression), …
  FROM a_table
 INNER JOIN some_table
       ON a_table.column = some_table.column
 WHERE a_condition
 GROUP BY column
HAVING some_condition
 ORDER BY column
 LIMIT 5;
In what order does SQL run the clauses? Select the correct option from the list of choices below:

SELECT, FROM, WHERE, GROUP BY
FROM, WHERE, HAVING, SELECT, LIMIT
SELECT, FROM, INNER JOIN, GROUP BY
FROM, SELECT, LIMIT, WHERE

Answer: FROM, WHERE, HAVING, SELECT, LIMIT
*From: Order of execution of a query starts with "From" statement. Because if we cannot access our table we cannot execute anything. 
*Joins: Join is for combining columns from one or more tables into a new table. Its logic is the same as the From statement. We have to firstly access tables.
*Where: If we filter our data firstly we can improve our query performance. Because of it, after accessing tables we filter them. 
*Group by: Group by is used for aggregating data by cohorts. 
*Having: Having is for filtering aggregated columns. If the query has a GROUP BY clause, then the constraints in the HAVING clause are then applied to the grouped rows 
*Select: Displays final columns. 
*Distinct: Of the remaining rows, rows with duplicate values in the column marked as DISTINCT will be discarded.
*Order by: It sorts our results.
*Limit: It limits our results. 


Question 3-1
We are given two tables, a users table with demographic information and the neighborhood they live in and a neighborhoods table. 
Write a query that returns all of the neighborhoods that have 0 users.

users table:

COLUMNS	              TYPE
id	              int
name	              varchar
neighborhood_id	int
created_at	      datetime

neighborhoods table:

COLUMNS	    TYPE
id	    int
name	    varchar
city_id	    int

Hint: Our aim to find all the neighborhoods without users. In a sense we need all the neighborhoods that do not have a singular user living in them. 
This means we have to introduce a concept of existence of a column in one table, but not in the other.

Answer: 
select id 
from (select n.id, count(u.id) as user_count
from neighborhoods as n 
left join users as u on n.id=u.neighborhood_id
group by 1
having user_count=0) t;

Question 3-4: We are given a table called employers that consists of a user_id, year, and employer EIN label. 
Users can have multiple employers dictated by the different EIN labels.

Write a query to add a flag to each user if they have added a new employer in the last year in the table.

employers table:

COLUMN	TYPE
user_id	integer
year	string
employer_ein	string

Example:
employers table: 
# user_id    year    employer_ein
# 34323      2018    A
# 34323      2018    B
# 34323      2018    C
# 34323      2017    F
# 34323      2017    A
# 34323      2017    B
#
# 86323      2018    A
# 86323      2018    B
# 86323      2018    C
# 86323      2017    B
#
# 98787      2018    A
# 98787      2018    B
# 98787      2018    F
# 98787      2017    F
# 98787      2017    B
# 98787      2017    A
#
# 55559      2018    A
# 55559      2018    B
# 55559      2018    C

Output:
# user_id    year      new_ein_flag
# 34323      2018      1
# 86323      2018      1
# 98787      2018      0

Answer:
select user_id, year,
       max(case when min_year = max_year then 1 else 0 end) as new_ein_flag
from (select employer.*, max(year) over () as max_year,
             min(year) over (partition by user_id, employer_ein) as min_year
      from employer
     ) employer
where year = max_year
group by 1,2;


Question 3-6: Given the revenue transactions table above, write a query that finds the third purchase of every user.

`transactions` table:
COLUMN	TYPE
id	integer
user_id	integer
created_at	datetime
product_id	integer
quantity	integer

Output:
COLUMN	TYPE
user_id	integer
created_at	datetime
product_id	integer
quantity	integer
We need an indicator of which purchase was the third value. Whenever we think of ranking our dataset, it is helpful to then immediately think of a specific window function we can use.

We need to apply the RANK function to the transactions table. The RANK function is a window function that assigns a rank to each row in the partition of the result set.

Answer: 
With Ranking as(
	SELECT id,
	DENSE_RANK() OVER ([PARTITION by user_id] ORDER BY created_at asc) as ranking
	FROM transactions 
)

select user_id,created_at,product_id,quantity
from Ranking as r 
left join transactions as t on r.id=t.id
where ranking = 3;


Question 3-7: Given three tables, representing customer transactions and customer attributes: Write a query to get the average order value by gender.

transactions table:
COLUMN	TYPE
id	integer
user_id	integer
created_at	datetime
product_id	integer
quantity	integer

users table:
COLUMN	TYPE
id	integer
name	varchar
sex	varchar

products table:
COLUMN	TYPE
id	integer
name	string
price	float

Answer: 
Select sex, avg(quantity*price) as order_value
from transactions as t 
left join users as u on t.user_id=u.id
left join products as p on t.product_id=p.id
group by 1; 
